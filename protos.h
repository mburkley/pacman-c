/*
 * Copyright (c) 2024 Mark Burkley.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef __PROTOS_H
#define __PROTOS_H

void addTask_0042 (uint8_t task, uint8_t param);
void addISRTask_0051(uint8_t *ptr, int count, uint8_t* data);
void isr_008d (void);
void updateCounters_01dc (void);
void dispatchISRTasks_0221 (void);
void displayReady_0263 (void);
void checkCoinInput_0267 (void);
void checkCoinCounterTimeout_02ad (void);
void checkCoinCredit_02df (void);
void showStartNumPlayers_02fd (void);
void oneUp_0369 (uint8_t *ix);
void twoUp_0376 (uint8_t *iy);
void oneBlank_0383 (uint8_t *ix);
void twoBlank_0390 (uint8_t *iy);
void func_039d (void);
void mainStateMachine_03c8  (void);
void resetStateMachine_03d4 (void);
void initResetGame_03dc (void);
void introStateMachine_03fe (void);
void introStart_045f (void);
void introduceBlinky_0471 (void);
void introduceShadow_047f (void);
void introducePinky_048b (void);
void introduceSpeedy_0499 (void);
void introducePinkyNickname_049f (void);
void introduceInky_04a5 (void);
void introduceBashful_04b3 (void);
void introduceBlinkyNickname_0485 (void);
void introduceInkyNickname_04b9 (void);
void introduceClyde_04bf (void);
void introducePokey_04cd (void);
void introduceClydeNickname_04d3 (void);
void introducePoints_04d8 (void);
void introSceneSetup_04e0 (void);
void demoMazeHorizontal_0506 (void);
void introStartMoveBlinky_051c (void);
void introAdvanceState_0524 (uint8_t *hl, int b, int a);
void introMain_052c (void);
void introStartMovePinky_054b (void);
void introStartMoveInky_0556 (void);
void introStartMoveClyde_0561 (void);
void introCheckAllGhostsEaten_056c (void);
void introPlayGame_057c (void);
void selectDisplayGhostName_0580(int c);
void displayIntroMsg_0585(int c);
void incMainStateIntro_058e(void);
void introduceGhost_0593(int c);
XYPOS pacmanReverse_05a5 (void);
void drawGhost_05bf (int hl, int a);
void coinInsertedStateMachine_05e5 (void);
void pushStartMsg_05f3 (void);
void checkStartButtons_061b (void);
void player1ReadyMsg_0674 (void);
void incMainSub2_06a3 (void);
void creditStateReset_06a8 (void);
void playGameStateMachine_06be (void);
void setGhostColour_0bd6 (void);
void setupGhostTimers_070e(int b);
void setupMovePat_0814(uint8_t *hl);
void initLeaveHouseCounters_083a(uint8_t *hl);
void resetPlayerParams_0879 (void);
void incLevelStateSubr_0894 (void);
void levelStatePlayerReady_0899 (void);
void playGameMain_08cd (void);
void playerDied_090d (void);
void switchPlayers_0940 (void);
void switchModeDemo_0972 (void);
void gameOverOrNextPlayer_0988 (void);
void mazeColour_09ea (int param);
void advanceToLevelStatePlayGame_09d2 (void);
void playGameSoundOff_09d8 (void);
void mazeColourWhite_09e8 (void);
void mazeColourBlue_09fe (void);
void mazeColourWhite_0a02 (void);
void mazeColourBlue_0a04 (void);
void mazeColourWhite_0a06 (void);
void mazeColourBlue_0a08 (void);
void mazeColourWhite_0a0a (void);
void mazeColourBlue_0a0c (void);
void mazeReset_0a0e (void);
void nextLevelStateMachine_0a2c (void);
void incLevelState_0a6f (void);
void nextLevel_0a7c (void);
void gameOverOrNextPlayer_0aa0 (void);
void advanceToLevelStatePlayGame_0aa3 (void);
void swapP1P2Difficulty_0aa6 (void);
void ghostsFlashBecomingInedible_0ac3 (void);
void flashPowerups_0c0d (void);
void ghostsLeaveHouse_0c42 (void);
void toggleGhostAnimation_0e23 (void);
void ghostsChangeOrientation_0e36 (void);
void updatePillsEatenSoundEffect_0e6c (void);
void selectFruit_0ead (void);
void resetFruit_1000 (void);
void resetFruitState_1004 (void);
void func_100b (void);
void updateGhostStates_1017 (void);
void selectGhostState_1066 (void);
void blinkyStateMachine_1094 (void);
void pinkyStateMachine_109e (void);
void inkyStateMachine_10a8 (void);
void clydeStateMachine_10b4 (void);
void blinkyStateDead_10c0 (void);
void blinkyStateEnterHouse_10d2 (void);
void ghostsAnyDeadSoundOff_1101 (void);
void pinkyStateDead_1118 (void);
void pinkyStateEnterHouse_112a (void);
void inkyStateDead_115c(void);
void inkyStateEnterHouse_116e (void);
void inkyStateHouseMoveAside_118f (void);
void clydeStateDead_11c9 (void);
void clydeStateEnterHouse_11db (void);
void clydeStateHouseMoveAside_11fc (void);
void ghostKilledState_1235 (void);
void showKillPoints_123f (void);
void incKilledState_1272 (void);
void pacmanDeadAnimState_1291 (void);
void pacmanDeadAnimState1To4_12b7 (void);
void pacmanDeadAnimState5_12cb (void);
void pacmanDeadAnimation_12d6(int ch, int count);
void pacmanDeadAnimState6_12f9 (void);
void pacmanDeadAnimState7_1306 (void);
void pacmanDeadAnimState8_130e (void);
void pacmanDeadAnimState9_1316 (void);
void pacmanDeadAnimState10_131e (void);
void pacmanDeadAnimState11_1326 (void);
void pacmanDeadAnimState12_132e (void);
void pacmanDeadAnimState13_1336 (void);
void pacmanDeadAnimState14_133e (void);
void pacmanDeadAnimState15_1346 (void);
void decrementLives_1353 (void);
void powerupOver_1376 (void);
void checkInactivityCounter_13dd (void);
void spriteAnimationUpright_141f (void);
void spriteAnimationCocktail_1490 (void);
void spriteAnimation_14fe (bool invert);
void ghostsCocktailMode_15b4 (bool invert);
void scene1Animation_15e6 (void);
void scene2Animation_162d (void);
void scene3Animation_1652 (void);
void selectPacmanLeftSprite_168c (void);
void selectPacmanDownSprite_16b1 (void);
void selectPacmanRightSprite_16d6 (void);
void selectPacmanUpSprite_16f7 (void);
void pacmanCheckGhostCoincidence_171d (void);
void pacmanGhostCoincide_1763 (int b);
void pacmanCheckEatGhost_1789 (void);
void pacmanUpdateMovePat_1806 (void);
void pacmanCheckMoveClear_18e4 (int b);
void pacmanHitMazeWall_1940 (int b);
void pacmanMove_1950 (void);
void pacmanUpdatePos_1985(XYPOS pos);
void pacmanMoveTile_1a19 (void);
void pacmanMove_1a5c (void);
void checkGhostsBecomeEdible_1a6a (void);
void ghostsBecomeEdible_1a70 (void);
void pacmanOrientLeft_1ac9 (void);
void pacmanOrientRight_1ad9 (void);
void pacmanOrientUp_1ae8 (void);
void pacmanOrientDown_1af8 (void);
void updateLeaveHouseCounters_1b08 (void);
void blinkyUpdateMovePat_1b36 (void);
void blinkyUpdatePosition_1bd8 (void);
void pinkyUpdatePosition_1caf (void);
void pinkyUpdateMovePat_1c4b (void);
void inkyUpdateMovePat_1d22 (void);
void inkyUpdatePosition_1d86 (void);
void clydeUpdateMovePat_1df9 (void);
void clydeUpdatePosition_1e5d (void);
bool checkTunnelTBD_1ed0(int ghost);
void blinkyCheckReverse_1efe (void);
void pinkyCheckReverse_1f25 (void);
void pinkyReverse_1f2e (void);
void inkyCheckReverse_1f4c (void);
void inkyReverse_1f55 (void);
void clydeCheckReverse_1f73 (void);
void clydeReverse_1f7c (void);
XYPOS addXYOffset_2000 (XYPOS ix, XYPOS iy);
uint8_t getScreenCharPosOffset_200f (XYPOS offset, XYPOS pos);
XYPOS pixelToTile_2018 (XYPOS pos);
uint16_t getScreenOffset_202d (XYPOS hl);
uint16_t getColourOffset_2052 (XYPOS pos);
void checkGhostEnterTunnel_205a (XYPOS pos, uint8_t *aux);
void pinkyCheckLeaveHouse_2069 (void);
void inkyCheckLeaveHouse_208c (void);
void clydeCheckLeaveHouse_20af (void);
void updateDifficultyTBD_20d7 (void);
void scene1StateMachine_2108 (void);
void scene1State0_211a (void);
void incScene1State_212b (void);
void updateMoveVectorPacmanBlinky_2130 (void);
void updateMoveVectorBlinky_2136 (void);
void scene1State1_2140 (void);
void scene1State2_214b (void);
void scene1State4_2170 (void);
void scene1State5_217b (void);
void scene1State6_2186 (void);
void scene2StateMachine_219e (void);
void scene2State0_21c2(uint16_t iy);
void scene2State2_21e1(uint16_t iy);
void incScene2State_21f0 (void);
void scene2State3_21f5(uint16_t iy);
void scene2State4_220c(uint16_t iy);
void scene2State5_221e (uint16_t param);
void updateMoveVector_2237 (void);
void scene2State6_2244(uint16_t iy);
void scene2State7_225d(uint16_t iy);
void scene2State9_226a(uint16_t iy);
void scene2State11_2286(uint16_t iy);
void scene2State13_228d(uint16_t iy);
void scene3StateMachine_2297 (void);
void scene3State0_22a7 (void);
void incScene3State_22b9 (void);
void scene3State1_22be (void);
void scene3State3_22dd (void);
void scene3FruitPos_22e4 (void);
void scene3State4_22f5 (void);
void scene3State5_22fe (void);
void initSelfTest_230b (void);
void mainTaskLoop_234b (void);
void advanceLevelState_23e8 (int param);
void jumpClearScreen_23ed(int param);
void clearScreen_23f3 (void);
void clearScreenMazeOnly_2400 (void);
void clearColour_240d (int param);
void drawMaze_2419 (int param);
void drawPills_2448(int param);
void updatePillsFromScreen_2487 (int param);
void clearPillArrays_24c9 ();
void mazeColours_24d7(int param);
void initialisePositions_25d3 (int param);
void resetPositions_2675 ();
void setGhostPosition_267e (int y, int x);
void blinkySubstateTBD_268b(int param);
void resetGameState_2698 ();
void clearGhostState_26a2 ();
void showBonusLifeScore_26b2 ();
void configureGame_26d0 (int unused);
void blinkyScatterOrChase_2730 (int param);
void pinkyScatterOrChase_276c (int param);
void inkyScatterOrChase_27a9 (int param);
void clydeScatterOrChase_27f1 (int param);
void homeOrRandomBlinky_283b ();
void homeOrRandomPinky_2865 ();
void homeOrRandomInky_288f ();
void pacmanOrientationDemo_28e3 ();
void homeOrRandomClyde_28b9 ();
XYPOS findBestOrientation_2966 (XYPOS hl, XYPOS de, uint8_t *a);
XYPOS randomDirection_291e (XYPOS hl, uint8_t *orientation);
uint16_t computeDistance_29ea(XYPOS ix, XYPOS iy);
uint16_t calcSquare_2a12(uint8_t a);
uint8_t random_2a23 (void);
void clearPillsScreen_2a35 ();
void addToScore_2a5a(int b);
void drawPlayerScore_2aaf (uint8_t *score);
void drawScore_2abe (uint16_t screenLoc, uint8_t *score, int blanks);
int drawDigit_2ace(uint16_t *screenLoc, int digit, int blanks);
void clearScores_2ae0 ();
uint8_t* getPlayerScorePtr_2b0b (void);
uint16_t scoreTable_2b17[];
void extraLife_2b33 (uint8_t *score);
uint16_t displayLives_2b4a (int lives);
void bottomTextColourAndDisplayLives_2b6a (int unused);
void drawBlankSquare_2b7e(uint8_t *hl);
void drawCharSquare_2b80 (uint8_t *hl, int a);
void drawFruit_2b8f (uint8_t *hl, int a);
void displayCredits_2ba1 ();
void fillScreenArea_2bcd (int addr, int ch, int cols, int rows);
void fruitHistoryLevelCheck_2bea (int param);
void displayFruitHistory_2bfd (uint8_t *table, int level);
void fruitHistoryLevelHigherThan8_2c2e (int level);
void func_2c44(uint8_t a);
void playSongsAllChannels_2cc1 (void);
void displayMsg_2c5e (int b);
void soundEffectsAllChannels_2d0c (void);
uint8_t playSongOneChannel_2d44 (SOUND_EFFECT *effect, uint8_t *frequency, uint8_t *table);
void func_2dd7 (void);
uint8_t soundEffectClear_2df4 (SOUND_EFFECT *effect, uint8_t *frequency);
uint8_t soundEffectOneChannel_2dee (SOUND_EFFECT *effect, uint8_t *frequency,
                                    uint8_t *table, int chan);
uint8_t soundEffectProcess_2e1b (SOUND_EFFECT *effect, uint8_t *frequency,
                                 uint8_t *table, int chan);
uint8_t frequencyScaledWithVolume_2ee4 (SOUND_EFFECT *effect, uint8_t *frequency, uint16_t frequencyValue, uint8_t a);
uint8_t frequencyWithVolume_2ee8 (SOUND_EFFECT *effect, uint8_t *frequency, uint16_t frequencyValue);
uint8_t volumeDecayNone_2f22 (SOUND_EFFECT *effect);
uint8_t volumeDecay_2f26 (SOUND_EFFECT *effect);
uint8_t volumeDecayHalfTime_2f2b (SOUND_EFFECT *effect);
uint8_t volumeDecreaseConditional_2f30 (SOUND_EFFECT *effect, int condition);
uint8_t volumeDecrease_2f34 (SOUND_EFFECT *effect, uint8_t a);
uint8_t volumeDecayQuarterTime_2f3c (SOUND_EFFECT *effect);
uint8_t volumeDecayEighthTime_2f43 (SOUND_EFFECT *effect);
uint8_t soundEffectDoNothing_2f4a (SOUND_EFFECT *effect);
void soundEffectIndirect_2f55 (SOUND_EFFECT *effect, uint8_t *frequency);
void soundEffectSelect_2f65 (SOUND_EFFECT *effect, uint8_t *frequency);
void soundEffectInitialFrequency_2f77 (SOUND_EFFECT *effect, uint8_t *frequency);
void soundEffectInitialVolume_2f89 (SOUND_EFFECT *effect, uint8_t *frequency);
void soundEffectType_2f9b (SOUND_EFFECT *effect, uint8_t *frequency);
void soundEffectMarkDone_2fad (SOUND_EFFECT *effect, uint8_t *frequency);
void isr_3000 (void);
void romChecksumBad_3031 (uint8_t h, uint8_t checksum);
void ramTest_3042 (void);
void badRam_30b5 (uint8_t e, uint8_t checksum);
void testResultRamRom_30bd (int e, uint8_t checksum, int b);
void badRomOrRamMessage_30fb (int e, int h, uint8_t checksum);
void serviceModeOrStartGame_3174 (void);
void delay_32ed (void);
void madeByNamco_3af4 (void);

#endif
